{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputValue","setInputValue","listData","setListData","setStatus","className","onChange","e","target","value","valut","onClick","preventDefault","status","id","Math","random","Todo","todo","map","el","filter","TodoList","filteredState","key","App","useState","setFilteredState","useEffect","localStorage","getItem","setItem","JSON","stringify","parse","filterHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAgCeA,EA7BF,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,WAAYC,EAAsD,EAAtDA,cAAeC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAc1D,OACA,8BACI,yBAAKC,UAAU,UACX,4BAAQC,SAPE,SAACC,GACnBH,EAAUG,EAAEC,OAAOC,SAOP,4BAAQA,MAAM,OAAd,OACA,4BAAQC,MAAM,aAAd,aACA,4BAAQA,MAAM,eAAd,iBAGR,2BAAOJ,SAhBM,SAACC,GAClBN,EAAcM,EAAEC,OAAOC,QAeYA,MAAOT,IACtC,4BAAQW,QAtBM,SAACJ,GACnBA,EAAEK,iBACFT,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAAEO,MAAOT,EAAYa,QAAQ,EAAOC,GAAIC,KAAKC,aACvEf,EAAc,MAmBV,S,OCJGgB,EApBF,SAAC,GAA4C,IAA1CR,EAAyC,EAAzCA,MAAOP,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,YAAae,EAAW,EAAXA,KAS1C,OACI,yBAAKb,UAAU,QACX,wBAAIA,UAAWa,EAAKL,OAAQ,YAAY,IAAKJ,GAC7C,6BACI,4BAAQE,QARC,WACjBR,EAAYD,EAASiB,KAAI,SAAAC,GAAE,OAAIA,EAAGN,KAAOI,EAAKJ,GAAf,2BAAwBM,GAAxB,IAA4BP,QAASO,EAAGP,SAAUO,QAOzE,YACA,4BAAQT,QAZD,WACfR,EAAYD,EAASmB,QAAO,SAACD,GAAD,OAAQA,EAAGN,KAAOI,EAAKJ,SAW3C,aCHDQ,EAXE,SAAC,GAA6C,IAA3CpB,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,YAAaoB,EAAmB,EAAnBA,cACvC,OACI,6BACI,4BACKA,EAAcJ,KAAI,SAACC,GAAD,OAAQ,kBAAC,EAAD,CAAMI,IAAKJ,EAAGN,GAAIL,MAAOW,EAAGX,MACnDP,SAAUA,EAAUgB,KAAME,EAAIjB,YAAaA,UCiDhDsB,EAnDH,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACT1B,EADS,KACGC,EADH,OAEgByB,mBAAS,IAFzB,mBAETxB,EAFS,KAECC,EAFD,OAGYuB,mBAAS,OAHrB,mBAGTb,EAHS,KAGDT,EAHC,OAI0BsB,mBAAS,IAJnC,mBAITH,EAJS,KAIMI,EAJN,KAsChB,OAhCAC,qBAAU,WAEgC,OAAlCC,aAAaC,QAAQ,SACvBD,aAAaE,QAAQ,QAASC,KAAKC,UAAU,KACxC9B,EAAY6B,KAAKE,MAAML,aAAaC,QAAQ,aAGpD,IAEHF,qBAAU,YACc,WACpB,OAAQf,GACN,IAAK,YACHc,EAAiBzB,EAASmB,QAAO,SAAAD,GAAE,OAAkB,IAAdA,EAAGP,WAC1C,MACF,IAAK,cACHc,EAAiBzB,EAASmB,QAAO,SAAAD,GAAE,OAAkB,IAAdA,EAAGP,WAC1C,MACF,IAAK,MACHc,EAAiBzB,IASvBiC,GAFEN,aAAaE,QAAQ,QAASC,KAAKC,UAAU/B,MAI9C,CAACW,EAAQX,IAGV,yBAAKG,UAAU,OACb,gCACE,0CAEF,kBAAC,EAAD,CAAML,WAAYA,EAAYC,cAAeA,EAC3CC,SAAUA,EAAUC,YAAaA,EACjCC,UAAWA,IACb,kBAAC,EAAD,CAAUF,SAAUA,EAAUC,YAAaA,EAAaoB,cAAeA,MCxCzDa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dd89a7e9.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Form = ({ inputValue, setInputValue, listData, setListData, setStatus }) => {\n\n    const buttonHandler = (e) =>{\n        e.preventDefault();\n        setListData([...listData, { value: inputValue, status: false, id: Math.random() }]);\n        setInputValue('')\n    }\n    const inputHandler = (e) => {\n        setInputValue(e.target.value)\n    }\n    const statusHandler = (e) => {\n        setStatus(e.target.value)\n    }\n    \n        return (\n        <form>\n            <div className='choose'>\n                <select onChange={statusHandler}>\n                    <option value='all'>all</option>\n                    <option valut='completed'>completed</option>\n                    <option valut='uncompleted'>uncompleted</option>\n                </select>\n            </div>\n            <input onChange={inputHandler} value={inputValue}></input>\n            <button onClick={buttonHandler}>add</button>\n        </form >\n    )\n}\n\nexport default Form;","import React from 'react'\n\n\nconst Todo = ({ value, listData, setListData, todo }) => {\n  \n    const deleteTodo = () => {\n        setListData(listData.filter((el) => el.id !== todo.id))\n    }\n    const completeTodo = () => {\n        setListData(listData.map(el => el.id === todo.id ? {...el, status: !el.status} : el))\n    }\n    \n    return (\n        <div className='todo'>\n            <li className={todo.status? 'completed':''}>{value}</li>\n            <div>\n                <button onClick={completeTodo}>complete</button>\n                <button onClick={deleteTodo}>delete</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Todo","import React from 'react'\nimport Todo from './Todo'\n\nconst TodoList = ({ listData, setListData, filteredState}) => {\n    return (\n        <div>\n            <ul>\n                {filteredState.map((el) => <Todo key={el.id} value={el.value}\n                    listData={listData} todo={el} setListData={setListData} />)}\n            </ul>\n        </div>\n    )\n}\n\nexport default TodoList","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\n\nconst App = () => {\n  const [inputValue, setInputValue] = useState('')\n  const [listData, setListData] = useState([])\n  const [status, setStatus] = useState('all')\n  const [filteredState, setFilteredState] = useState([])\n\n  useEffect(() => {\n    const getLocalTodos = () => {\n      if (localStorage.getItem('todos') === null) {\n        localStorage.setItem('todos', JSON.stringify([]))\n      } else setListData(JSON.parse(localStorage.getItem('todos')))\n    }\n    getLocalTodos()\n  }, [])\n  \n  useEffect(() => {\n    const filterHandler = () => {\n      switch (status) {\n        case 'completed':\n          setFilteredState(listData.filter(el => el.status === true))\n          break\n        case 'uncompleted':\n          setFilteredState(listData.filter(el => el.status === false))\n          break\n        case 'all':\n          setFilteredState(listData)\n          break\n        default:\n          break\n      }\n    }\n    const saveLocalTodos = () => {  \n      localStorage.setItem('todos', JSON.stringify(listData))\n    }\n    filterHandler()\n    saveLocalTodos()\n  }, [status, listData])\n  \n  return (\n    <div className='App'>\n      <header>\n        <h1>ToDo LiSt</h1>\n      </header>\n      <Form inputValue={inputValue} setInputValue={setInputValue}\n        listData={listData} setListData={setListData}\n        setStatus={setStatus} />\n      <TodoList listData={listData} setListData={setListData} filteredState={filteredState} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}